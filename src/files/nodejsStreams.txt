const http = require('http');
const fs = require('fs');

// Create an HTTP server
const server = http.createServer((req, res) => {
  // Serve a large file using streams
  const filePath = 'largeFile.txt';
  const readStream = fs.createReadStream(filePath);

  readStream.on('open', () => {
    // Set response headers
    res.setHeader('Content-Type', 'text/plain');
    // Pipe the file stream to the HTTP response stream
    readStream.pipe(res);
  });

  readStream.on('error', (err) => {
    console.error('Error reading file:', err);
    res.statusCode = 500;
    res.end('Internal Server Error');
  });
});

// Listen on port 3000
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
});

// Example of piping one file stream to another
const sourceFilePath = 'source.txt';
const destinationFilePath = 'destination.txt';

const sourceStream = fs.createReadStream(sourceFilePath);
const destinationStream = fs.createWriteStream(destinationFilePath);

sourceStream.on('error', (err) => {
  console.error('Error reading source file:', err);
});

destinationStream.on('error', (err) => {
  console.error('Error writing to destination file:', err);
});

sourceStream.pipe(destinationStream);

// Close the destination stream when the source stream ends
sourceStream.on('end', () => {
  destinationStream.end('End of stream');
});